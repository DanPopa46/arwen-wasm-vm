void init() {
	createAsyncCall("prep", "sc-alpha", 12 ERD, "getReadyA", "alphaReady", "alphaFailed", 100);
	createAsyncCall("prep", "sc-beta", 13 ERD, "getReadyB", "betaReady", "betaFailed", 100);
	setAsyncContextCallback("prep", "prepReady");

	createAsyncCall("setup", "sc-gamma", 12 ERD, "getReadyG", "gammaReady", "gammaFailed", 100);
	createAsyncCall("setup", "sc-delta", 13 ERD, "getReadyD", "deltaReady", "deltaFailed", 100);
	setAsyncContextCallback("setup", "setupReady");

	asyncCall("someone", 0, "beNotified");
}



alphaReady() {}
alphaFailed() {}

betaReady() {}
betaFailed() {}

prepReady() {}



gammaReady() {}
gammaFailed() {}

deltaReady() {}
deltaFailed() {}

setupReady() {}


/////////////////


doRunSmartContractCall() {
	...

	callSCMethod() {
		  ...

			switch callType {
			case vmcommon.DirectCall:
				_, err = host.processAsyncContext(runtime.GetAsyncContext())
			case vmcommon.AsynchronousCall:
				pendingAsyncContext, paiErr := host.processAsyncContext(runtime.GetAsyncContext())
				if paiErr != nil {
					return paiErr
				}
				if len(pendingAsyncContext.AsyncCallGroups) == 0 {
					err = host.sendCallbackToCurrentCaller()
				}
			case vmcommon.AsynchronousCallBack:
				err = host.processCallbackStack()
			default:
				err = arwen.ErrUnknownCallType
			}

			return err
	}
}



ExecuteOnDestContext() {
	...

	err = host.execute(input)
	if err != nil {
		return
	}
	asyncContext = runtime.GetAsyncContext()
	_, err = host.processAsyncContext(asyncContext)

}



ExecuteOnSameContext() {
	...

	err = host.execute(input)
	if err != nil {
		return
	}
	asyncContext = runtime.GetAsyncContext()
	return
}
